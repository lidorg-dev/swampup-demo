name: Build and Tag Docker Image

on:
  workflow_dispatch:
  push:
    branches:
      - main
      
jobs:
  build-and-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v3
        env:
          JF_URL: ${{ secrets.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      - name: insert secrets inside config files
        env:
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MOVIE_API_KEY: ${{ secrets.MOVIE_API_KEY }}
          MOVIE_API_SECRET: ${{ secrets.MOVIE_API_SECRET }}
          PSQL_PASS: ${{ secrets.PSQL_PASS }}
          PSQL_USER: ${{ secrets.PSQL_USER }}
          SQL_DB_URI: "postgresql+psycopg2://$PSQL_USER:$PSQL_PASS@python-watchlist-postgres-db-1/watchlist"
        run: |
           sed -i "s/export MOVIE_API_KEY=/export MOVIE_API_KEY=$MOVIE_API_KEY/g" run.sh
           sed -i "s/export SECRET_KEY=/export SECRET_KEY=$MOVIE_API_SECRET/g" run.sh
           sed -i "s/export MAIL_USERNAME=/export MAIL_USERNAME=$MAIL_USERNAME/g" run.sh
           sed -i "s/export MAIL_PASSWORD=/export MAIL_PASSWORD=$MAIL_PASSWORD/g" run.sh
           sed -i "s/POSTGRES_PASSWORD=/POSTGRES_PASSWORD=$PSQL_PASS/g" db.env
           sed -i -e 's|SQLALCHEMY_DATABASE_URI = |SQLALCHEMY_DATABASE_URI = "'"$SQL_DB_URI"'"|g' config.py
           cat config.py
           cat run.sh
           cat db.env

      - name: Build Tag and push Docker Image
        env:
          IMAGE_NAME: swampupdemo2023.jfrog.io/swampup-docker/watchlist:latest
        run: |
          jf docker build -t $IMAGE_NAME -f docker/Dockerfile .
          jf docker push $IMAGE_NAME
          
      - name: Publish Build info With JFrog CLI
        env:
          # Generated and maintained by GitHub
          JFROG_CLI_BUILD_NAME: jfrog-docker-build-example
          # JFrog organization secret
          JFROG_CLI_BUILD_NUMBER : ${{ github.run_number }}
        run: |
          # Export the build name and build nuber
          # Collect environment variables for the build
          jf rt build-collect-env
          # Collect VCS details from git and add them to the build
          jf rt build-add-git
          # Publish build info
          jf rt build-publish
